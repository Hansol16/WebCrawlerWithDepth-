package Case;

import Base.MainMenu;
import Base.PageViewItem;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.ObjectUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;


import static Base.CaseList.item;
import static Base.CaseList.result;
import static Base.GoogleLogin.driver;
import static Base.PageViewItem.Back_Button;
import static Base.PageViewItem.LinkPaste_Button;

public class Pagedetail {

    public static String PageTotal;
    public static String PageTotalStr;
    public static WebElement Notebook;
    public static WebElement Pagedetail;
    public static ArrayList<WebElement> NotebookArr;
    public static WebElement linkPaste_alert;

    public static WebElement PageCount;

    public static int PageTotalInt;

    public static File file; // download 하고 손대지 않음.
    public static File newfile; // download -> dir 이동된


    public static List<String> fileNameList; //png 파일명만 추출 ,oldPathFileName_FilterList에서
    public static List<String> newFileNameList; //png 파일명만 추출
    public static List<String> getFileListPath; //oldPathFileList to path
    public static List<String> getNewFileListPath; // move path file list
    public static ArrayList<String> NotebookLIs_t; //notebook name test
    public static ArrayList<WebElement> NotebookLis; // 노트북 리스트 이름
    public static int NotebookCint; //notebook count int 형
    public static WebElement NotebookN; //notebook N개
    public static String NotebookC; //notebook int count
    public static ArrayList<WebElement> NotebookArrList;
    public static String NotebookC_total;


    public static void PageDetail() throws InterruptedException {

        MainMenu M = new MainMenu();
        M.MainMenu();
        MainMenu.Notebook.click();
        Thread.sleep(7000);


        NotebookArr = new ArrayList<WebElement>();

        //NotebookN 노트북 개수 체크
        NotebookN = driver.findElement(By.xpath("//*[@id=\"root\"]/div/div/main/div/div/div/div[1]/div/div[1]/p"));
//        System.out.println(NotebookN);
//        System.out.println("**********test [1]  노트북 개수 체크 **********");

        NotebookC = NotebookN.getText(); //web>string

        //System.out.println(NotebookC); //전체 9 권
        String[] NotebookCt = NotebookC.split("");
        NotebookC_total = NotebookCt[3];
        NotebookCint = Integer.parseInt(NotebookC_total.substring(0));
        //노트북 개수 숫자만 받아 int형 전환
        //System.out.println(NotebookCint); //9
        System.out.println("****************** Test [1]  노트북 개수: " + NotebookCint + "권 ******************");
        //NotebookCint = Integer.parseInt(NotebookC_total.substring(0));
        //노트북 개수 숫자만 받아 int형 전환
        //System.out.println(NotebookCint); //9


        Thread.sleep(2000);
        //int Dir=0;

        for (int a = 0; a < NotebookCint; a++) {

            try {
                NotebookArr = (ArrayList<WebElement>) driver.findElements(By.cssSelector("div.MuiBox-root> ul > div:nth-child(" + ( a + 1 ) + ")> button > div> img"));

                Thread.sleep(5000);

                if(ObjectUtils.isNotEmpty(NotebookArr)){
                    NotebookArr.get(a).click();
                }

                //org.apache.commons.lang3.ObjectUtils.defaulIfNull(NotebookArr);
                //NotebookArr.get(a).click();

                Thread.sleep(7000);
                //노트북 페이지 첫페이지 선택
                Pagedetail = driver.findElement(By.cssSelector("div.MuiGrid-root.MuiGrid-container.MuiGrid-item.MuiGrid-grid-xs-12.MuiGrid-grid-sm-true > div.MuiBox-root> ul > div:nth-child(1) > button > div"));
                //`Pagedetail = driver.findElement(By.cssSelector("div>MuiGrid-root>MuiGrid-container> MuiGrid-item> MuiGrid-grid-xs-12> MuiGrid-grid-sm-true > div> MuiBox-root> ul > div:nth-child(1) > button > div"));

                Pagedetail.click();
                System.out.println("****************** Test [2] Page view 진입 완료 ******************");
                //1. 파일 다운로드 2. url 3.옆으로 넘기기/ 페이지 값 체크 4. 파일 이동 5. compare 6. back key 넣어주기

                PageCount = driver.findElement(By.cssSelector("div > span:nth-child(4)"));

                //    public static String PageTotalStr;
                PageTotalStr = PageCount.getText();
                PageTotalInt = Integer.parseInt(PageTotalStr);
                System.out.println(PageTotalInt+" page");
                //* pageTotalInt 0이 아니라면
                // 아래 진행한다 !(a==b)
//                if(!(PageTotalInt ==0)){
//                    System.out.println("다음페이지가 존재하지 않습니다.");
//                    //다시 원래 페이지로 이동해야함 > 노트북 표지로
//                } else{
//                    System.out.println(" 테스트 진행합니다. ");
//                }

                //저장 누르고 -> 페이지 이동 누르고 -> PageTotalStr만큼
                for (int i = 1; i <= PageTotalInt; i++) {
                    Thread.sleep(5000);
                    PageViewItem P = new PageViewItem();
                    P.Getpageviewitem();
                    PageViewItem.ImageDown_Button.click();
                    //Thread.sleep(2000);
                    PageViewItem.LinkPaste_Button.click();
                    Thread.sleep(7000);
                    linkPaste_alert = driver.findElement(By.className("MuiAlert-message"));
                    if (Objects.equals(linkPaste_alert.getText(), "링크가 복사되었습니다.")) {
                        item.add("링크 복사 토스트 팝업 확인");
                        result.add("PASS");
                        System.out.println("토스트 팝업 확인 완료");
                    } else {
                        item.add("링크 복사 토스트 팝업 확인");
                        result.add("FAIL");
                    }

                   for (int j = 1; j < PageTotalInt - 1; j++) {
                       PageViewItem.Next_Button.click();
                       Thread.sleep(2000);
                    }
                }

                //filemove note 수 만큼
                file = new File("/Users/gimhansol/Downloads");

                fileNameList = new ArrayList<String>(); //old path file list up
                File[] fileList = file.listFiles((dir, name) -> name.endsWith("png"));
                // 특정 파일 경로에서 png 파일명 검색 하여 송출 -> fileList

                //ArrayList<String> getFileList = new ArrayList<>();
                getFileListPath = new ArrayList<>();
                int Dir = 0;
                File dirT = new File("/Users/gimhansol/Documents/AutomationProject/" + Dir + "");
                boolean DirectoryCreated = dirT.mkdirs();
                //디렉토리 생성 for문 돌며 노트북 개수만큼

                for (File file2 : fileList) {
                    getFileListPath.add(file2.toString());//받은 파일 리스트의 원래 경로 저장 -> 정보나 값들을 문자열로 만들어 리턴함.
                }

                for (int t = 0; t < getFileListPath.size(); t++) {
                    File file = FileUtils.getFile(getFileListPath.get(t)); //원래 경로
                    fileNameList.add(file.toString().substring(getFileListPath.get(t).lastIndexOf("/")));//받은 파일 리스트에서 파일명만 저장

                    Path file1 = Paths.get(getFileListPath.get(t));
                    Path newFile1 = Paths.get("/Users/gimhansol/Documents/AutomationProject/" + Dir + "" + fileNameList.get(t));
                    //'이동된 경로+ fileNameList(i)' 가 덧붙여짐
                    // getFileListPath 자체가 '기존 경로 + 파일 리스트' 배열
//                        System.out.println("파일네임리스트 확인 차 ");
//                        System.out.println(fileNameList);

                    Path newFilePath = Files.move(file1, newFile1, StandardCopyOption.REPLACE_EXISTING);
                    //Files.move(fromPath, toPath);
                    //디렉토리에 이동 및 기존 대상 덮어쓰기
                }
//                    Thread.sleep(5000);
//                    Back_Button.click();
//                    Thread.sleep(3000);
//                    MainMenu.Notebook.click();
//                    Thread.sleep(3000);
// 버튼 클릭

                newfile = new File("/Users/gimhansol/Documents/AutomationProject/" + Dir + ""); //새로 이동된 폴더
                File[] newFileList = newfile.listFiles((File dir, String name) -> name.endsWith("png"));

                getNewFileListPath = new ArrayList<>();
                newFileNameList = new ArrayList<>();


                for (File newfile : newFileList) {
                    getNewFileListPath.add(newfile.toString());
                    //System.out.println(getNewFileListPath);
                }

                for (int i = 0; i < getNewFileListPath.size(); i++) {
                    File newfile = FileUtils.getFile(getNewFileListPath.get(i));
                    System.out.println("=======newfile 지남======");
                    //System.out.println(newfile);
                    newFileNameList.add(newfile.toString().substring(getNewFileListPath.get(i).lastIndexOf("/")));
                    //System.out.println("newFileNameList 확인차");
                    //System.out.println(newFileNameList);

                    if (newFileNameList.isEmpty()) {
                        System.out.println("newFileNameList is empty");
                        newFileNameList.removeAll(Collections.singleton(null));

                    }
                    //java에서 list null check! NullPointException 관련 Err시 null값 Arr에서 제거

                }


                if (Objects.equals(fileNameList, newFileNameList)) {
                    item.add("기존 파일 이동 파일 일치");
                    result.add("PASS");
                    System.out.println("성공");

                } else {
                    item.add("기존 파일 이동 파일 불일치");
                    result.add("FALSE");
                    System.out.println("실패");
                }
                Thread.sleep(5000);
                Back_Button.click();
                Thread.sleep(3000);
                MainMenu.Notebook.click();
                Thread.sleep(3000);

                } catch (Exception e) {
                    e.printStackTrace();
                }

//            Thread.sleep(5000);
//            Back_Button.click();
//            Thread.sleep(3000);
//            MainMenu.Notebook.click();
//            Thread.sleep(3000);


        } //for 문 < 이 안에서 해결해야함
    }
}
//    public static void FileMove(){
//        try {
//            file = new File("/Users/gimhansol/Downloads");
//
//
//            fileNameList = new ArrayList<String>(); //old path file list up
//            File[] fileList = file.listFiles((dir, name) -> name.endsWith("png"));
//            // 특정 파일 경로에서 png 파일명 검색 하여 송출 -> fileList
//
//            //ArrayList<String> getFileList = new ArrayList<>();
//            getFileListPath = new ArrayList<>();
//            //여기부터 file 옮길 배열 부분
//
//            //File dir = new File("/Users/gimhansol/Documents/AutomationProject/0701");
//
//            for (int i = 0; i < NotebookCint; i++) {
//                File dir = new File("/Users/gimhansol/Documents/AutomationProject/07"+Dir+"");
//                boolean DirectoryCreated = dir.mkdirs();
//                //디렉토리 생성 * 여러개
//            }
//
//            for (File file2 : fileList) {
//                getFileListPath.add(file2.toString());//받은 파일 리스트의 원래 경로 저장 -> 정보나 값들을 문자열로 만들어 리턴함.
//            }
//
//            for (int i = 0; i < getFileListPath.size(); i++) {
//                File file = FileUtils.getFile(getFileListPath.get(i)); //원래 경로
//                fileNameList.add(file.toString().substring(getFileListPath.get(i).lastIndexOf("/")));//받은 파일 리스트에서 파일명만 저장
//
//                Path file1 = Paths.get(getFileListPath.get(i));
//                Path newFile1 = Paths.get("/Users/gimhansol/Documents/AutomationProject/"+Dir+"" + fileNameList.get(i));
//                //'이동된 경로+ fileNameList(i)' 가 덧붙여짐
//                /// getFileListPath 자체가 '기존 경로 + 파일 리스트' 배열
////                System.out.println("파일네임리스트 확인 차 ");
////                System.out.println(fileNameList);
//
//                Path newFilePath = Files.move(file1, newFile1, StandardCopyOption.REPLACE_EXISTING);
//                //Files.move(fromPath, toPath);
//                //디렉토리에 이동 및 기존 대상 덮어쓰기
//            }
//
//
//        } catch (IOException e) {
//            e.printStackTrace();
//        }
//    }
//
//    public static void imagedown( ) {
//        try {
//            PageCount = driver.findElement(By.cssSelector("div > span:nth-child(4)"));
//
//            //    public static String PageTotalStr;
//            PageTotalStr = PageCount.getText();
//
//            int PageTotalInt;
//            PageTotalInt = Integer.parseInt(PageTotalStr);
//
//            //저장 누르고 -> 페이지 이동 누르고 -> PageTotalStr만큼
//            for (int i = 1; i <= PageTotalInt; i++ ) {
//                //testcount = 3;
//                //for (int i = 1; i <= testcount; i++) { // 위에꺼로 바꿔주기
//                Thread.sleep(5000);
//                PageViewItem P = new PageViewItem();
//                P.Getpageviewitem();
//                PageViewItem.ImageDown_Button.click();
//
//
//                try {
//                    LinkPaste_Button.click();
//                    Thread.sleep(4000);
//
//                    WebElement linkPaste_alert = driver.findElement(By.className("MuiAlert-message"));
//                    if (Objects.equals(linkPaste_alert.getText(), "링크가 복사되었습니다.")) {
//                        item.add("링크 복사 토스트 팝업 확인");
//                        result.add("PASS");
//                    } else {
//                        item.add("링크 복사 토스트 팝업 확인");
//                        result.add("FAIL");
//                    }
//                } catch (Exception e) {
//                    e.printStackTrace();
//                } finally {
//                }
//
//                for (int j = 1; j < PageTotalInt - 1; j++) {
//                    Thread.sleep(7000);
//                    PageViewItem.Next_Button.click();
//                }
//            }
//            Thread.sleep(3000);
//            Back_Button.click();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//    }


//    public static void Compare( ) {
//
//        // 변수하나 지정하고 변수 =0; 그 변수  count ++
//        //int s=0; s++
//        // newfile
//
//        newfile = new File("/Users/gimhansol/Documents/AutomationProject/"+Dir+""); //새로 이동된 폴더
//        File[] newFileList = newfile.listFiles((dir, name) -> name.endsWith("png"));
//
//        getNewFileListPath = new ArrayList<>();
//        newFileNameList = new ArrayList<>();
//
//
//        for (File newfile : newFileList) {
//            getNewFileListPath.add(newfile.toString());
//            //System.out.println(getNewFileListPath);
//        }
//
//        try {
//            for (int i = 0; i < getNewFileListPath.size(); i++) {
//                File newfile = FileUtils.getFile(getNewFileListPath.get(i));
//                System.out.println("=======newfile 지남======");
//                //System.out.println(newfile);
//                newFileNameList.add(newfile.toString().substring(getNewFileListPath.get(i).lastIndexOf("/")));
//                //System.out.println("newFileNameList 확인차");
//                //System.out.println(newFileNameList);
//
//                if (newFileNameList.isEmpty()) {
//                    System.out.println("newFileNameList is empty");
//                    newFileNameList.removeAll(Collections.singleton(null));
//
//                }
//                //java에서 list null check! NullPointException 관련 Err시 null값 Arr에서 제거
//
//            }
//
//
//            if (Objects.equals(fileNameList, newFileNameList)) {
//                item.add("기존 파일 이동 파일 일치");
//                result.add("PASS");
//                System.out.println("성공");
//
//            } else {
//                item.add("기존 파일 이동 파일 불일치");
//                result.add("FALSE");
//                System.out.println("실패");
//            }
//
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//    }
